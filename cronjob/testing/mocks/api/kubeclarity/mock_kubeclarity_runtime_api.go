// Code generated by MockGen. DO NOT EDIT.
// Source: ../api/kubeclarity/kubeclarity_runtime_api.go

// Package mock_kubeclarity_api_runtime is a generated GoMock package.
package mock_kubeclarity_api_runtime

import (
	reflect "reflect"
	dto_application "github.com/scanyourkube/cronjob/dto/api/application"
	dto_application_resource "github.com/scanyourkube/cronjob/dto/api/application_resource"
	scan "github.com/scanyourkube/cronjob/dto/api/scan"
	dto_vulnerability "github.com/scanyourkube/cronjob/dto/api/vulnerability"

	gomock "github.com/golang/mock/gomock"
)

// MockIKubeClarityApi is a mock of IKubeClarityApi interface.
type MockIKubeClarityApi struct {
	ctrl     *gomock.Controller
	recorder *MockIKubeClarityApiMockRecorder
}

// MockIKubeClarityApiMockRecorder is the mock recorder for MockIKubeClarityApi.
type MockIKubeClarityApiMockRecorder struct {
	mock *MockIKubeClarityApi
}

// NewMockIKubeClarityApi creates a new mock instance.
func NewMockIKubeClarityApi(ctrl *gomock.Controller) *MockIKubeClarityApi {
	mock := &MockIKubeClarityApi{ctrl: ctrl}
	mock.recorder = &MockIKubeClarityApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKubeClarityApi) EXPECT() *MockIKubeClarityApiMockRecorder {
	return m.recorder
}

// GetApplicationResourceByApplicationId mocks base method.
func (m *MockIKubeClarityApi) GetApplicationResourceByApplicationId(applicationId string) ([]dto_application_resource.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourceByApplicationId", applicationId)
	ret0, _ := ret[0].([]dto_application_resource.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResourceByApplicationId indicates an expected call of GetApplicationResourceByApplicationId.
func (mr *MockIKubeClarityApiMockRecorder) GetApplicationResourceByApplicationId(applicationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourceByApplicationId", reflect.TypeOf((*MockIKubeClarityApi)(nil).GetApplicationResourceByApplicationId), applicationId)
}

// GetApplications mocks base method.
func (m *MockIKubeClarityApi) GetApplications() ([]dto_application.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications")
	ret0, _ := ret[0].([]dto_application.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockIKubeClarityApiMockRecorder) GetApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockIKubeClarityApi)(nil).GetApplications))
}

// GetScanProgress mocks base method.
func (m *MockIKubeClarityApi) GetScanProgress() (*scan.ScanProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanProgress")
	ret0, _ := ret[0].(*scan.ScanProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanProgress indicates an expected call of GetScanProgress.
func (mr *MockIKubeClarityApiMockRecorder) GetScanProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanProgress", reflect.TypeOf((*MockIKubeClarityApi)(nil).GetScanProgress))
}

// GetVulnerabilitiesOfApplicationResource mocks base method.
func (m *MockIKubeClarityApi) GetVulnerabilitiesOfApplicationResource(applicationResourceId string) ([]dto_vulnerability.DtoVulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilitiesOfApplicationResource", applicationResourceId)
	ret0, _ := ret[0].([]dto_vulnerability.DtoVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilitiesOfApplicationResource indicates an expected call of GetVulnerabilitiesOfApplicationResource.
func (mr *MockIKubeClarityApiMockRecorder) GetVulnerabilitiesOfApplicationResource(applicationResourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilitiesOfApplicationResource", reflect.TypeOf((*MockIKubeClarityApi)(nil).GetVulnerabilitiesOfApplicationResource), applicationResourceId)
}

// GetVulnerabilityDetailsWithPackage mocks base method.
func (m *MockIKubeClarityApi) GetVulnerabilityDetailsWithPackage(vulnerabilityId, packageId string) (*dto_vulnerability.DtoVulnerabilityDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilityDetailsWithPackage", vulnerabilityId, packageId)
	ret0, _ := ret[0].(*dto_vulnerability.DtoVulnerabilityDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilityDetailsWithPackage indicates an expected call of GetVulnerabilityDetailsWithPackage.
func (mr *MockIKubeClarityApiMockRecorder) GetVulnerabilityDetailsWithPackage(vulnerabilityId, packageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilityDetailsWithPackage", reflect.TypeOf((*MockIKubeClarityApi)(nil).GetVulnerabilityDetailsWithPackage), vulnerabilityId, packageId)
}

// StartScan mocks base method.
func (m *MockIKubeClarityApi) StartScan(scanConfig scan.RuntimeScanConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScan", scanConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartScan indicates an expected call of StartScan.
func (mr *MockIKubeClarityApiMockRecorder) StartScan(scanConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScan", reflect.TypeOf((*MockIKubeClarityApi)(nil).StartScan), scanConfig)
}
