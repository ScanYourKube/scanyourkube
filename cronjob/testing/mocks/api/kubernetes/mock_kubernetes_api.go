// Code generated by MockGen. DO NOT EDIT.
// Source: ../api/kubernetes/kubernetes_api.go

// Package mock_api_kubernetes is a generated GoMock package.
package mock_api_kubernetes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/rancher/rancher/pkg/client/generated/management/v3"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
)

// MockIKubernetesApi is a mock of IKubernetesApi interface.
type MockIKubernetesApi struct {
	ctrl     *gomock.Controller
	recorder *MockIKubernetesApiMockRecorder
}

// MockIKubernetesApiMockRecorder is the mock recorder for MockIKubernetesApi.
type MockIKubernetesApiMockRecorder struct {
	mock *MockIKubernetesApi
}

// NewMockIKubernetesApi creates a new mock instance.
func NewMockIKubernetesApi(ctrl *gomock.Controller) *MockIKubernetesApi {
	mock := &MockIKubernetesApi{ctrl: ctrl}
	mock.recorder = &MockIKubernetesApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKubernetesApi) EXPECT() *MockIKubernetesApiMockRecorder {
	return m.recorder
}

// GetDeployment mocks base method.
func (m *MockIKubernetesApi) GetDeployment(deploymentName, namespace string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", deploymentName, namespace)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockIKubernetesApiMockRecorder) GetDeployment(deploymentName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockIKubernetesApi)(nil).GetDeployment), deploymentName, namespace)
}

// GetNamespaces mocks base method.
func (m *MockIKubernetesApi) GetNamespaces() []v10.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces")
	ret0, _ := ret[0].([]v10.Namespace)
	return ret0
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockIKubernetesApiMockRecorder) GetNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockIKubernetesApi)(nil).GetNamespaces))
}

// GetPodByLabel mocks base method.
func (m *MockIKubernetesApi) GetPodByLabel(label, namespace string) (*v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", label, namespace)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockIKubernetesApiMockRecorder) GetPodByLabel(label, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockIKubernetesApi)(nil).GetPodByLabel), label, namespace)
}

// GetPods mocks base method.
func (m *MockIKubernetesApi) GetPods(namespace string) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", namespace)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods.
func (mr *MockIKubernetesApiMockRecorder) GetPods(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockIKubernetesApi)(nil).GetPods), namespace)
}

// GetReplicaSet mocks base method.
func (m *MockIKubernetesApi) GetReplicaSet(replicaSetName, namespace string) (*v1.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaSet", replicaSetName, namespace)
	ret0, _ := ret[0].(*v1.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaSet indicates an expected call of GetReplicaSet.
func (mr *MockIKubernetesApiMockRecorder) GetReplicaSet(replicaSetName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaSet", reflect.TypeOf((*MockIKubernetesApi)(nil).GetReplicaSet), replicaSetName, namespace)
}

// GetStatefulSet mocks base method.
func (m *MockIKubernetesApi) GetStatefulSet(statefulSetName, namespace string) (*v1.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSet", statefulSetName, namespace)
	ret0, _ := ret[0].(*v1.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSet indicates an expected call of GetStatefulSet.
func (mr *MockIKubernetesApiMockRecorder) GetStatefulSet(statefulSetName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSet", reflect.TypeOf((*MockIKubernetesApi)(nil).GetStatefulSet), statefulSetName, namespace)
}

// GetUserAttributes mocks base method.
func (m *MockIKubernetesApi) GetUserAttributes(userName string) (*client.UserAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAttributes", userName)
	ret0, _ := ret[0].(*client.UserAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttributes indicates an expected call of GetUserAttributes.
func (mr *MockIKubernetesApiMockRecorder) GetUserAttributes(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttributes", reflect.TypeOf((*MockIKubernetesApi)(nil).GetUserAttributes), userName)
}
