// Code generated by MockGen. DO NOT EDIT.
// Source: ../service/kubernetes/kubernetes_resource_service.go

// Package mock_kubernetes_resource_service is a generated GoMock package.
package mock_kubernetes_resource_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockIKubernetesResourceService is a mock of IKubernetesResourceService interface.
type MockIKubernetesResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockIKubernetesResourceServiceMockRecorder
}

// MockIKubernetesResourceServiceMockRecorder is the mock recorder for MockIKubernetesResourceService.
type MockIKubernetesResourceServiceMockRecorder struct {
	mock *MockIKubernetesResourceService
}

// NewMockIKubernetesResourceService creates a new mock instance.
func NewMockIKubernetesResourceService(ctrl *gomock.Controller) *MockIKubernetesResourceService {
	mock := &MockIKubernetesResourceService{ctrl: ctrl}
	mock.recorder = &MockIKubernetesResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKubernetesResourceService) EXPECT() *MockIKubernetesResourceServiceMockRecorder {
	return m.recorder
}

// GetNamespaceNames mocks base method.
func (m *MockIKubernetesResourceService) GetNamespaceNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNamespaceNames indicates an expected call of GetNamespaceNames.
func (mr *MockIKubernetesResourceServiceMockRecorder) GetNamespaceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceNames", reflect.TypeOf((*MockIKubernetesResourceService)(nil).GetNamespaceNames))
}

// GetOwnerEmailAddressFromAnnotations mocks base method.
func (m *MockIKubernetesResourceService) GetOwnerEmailAddressFromAnnotations(annotations map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerEmailAddressFromAnnotations", annotations)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerEmailAddressFromAnnotations indicates an expected call of GetOwnerEmailAddressFromAnnotations.
func (mr *MockIKubernetesResourceServiceMockRecorder) GetOwnerEmailAddressFromAnnotations(annotations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerEmailAddressFromAnnotations", reflect.TypeOf((*MockIKubernetesResourceService)(nil).GetOwnerEmailAddressFromAnnotations), annotations)
}

// GetOwnerEmailAddressesByPodLabels mocks base method.
func (m *MockIKubernetesResourceService) GetOwnerEmailAddressesByPodLabels(labels []string, environment string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerEmailAddressesByPodLabels", labels, environment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerEmailAddressesByPodLabels indicates an expected call of GetOwnerEmailAddressesByPodLabels.
func (mr *MockIKubernetesResourceServiceMockRecorder) GetOwnerEmailAddressesByPodLabels(labels, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerEmailAddressesByPodLabels", reflect.TypeOf((*MockIKubernetesResourceService)(nil).GetOwnerEmailAddressesByPodLabels), labels, environment)
}

// GetPods mocks base method.
func (m *MockIKubernetesResourceService) GetPods(namespace string) []v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", namespace)
	ret0, _ := ret[0].([]v1.Pod)
	return ret0
}

// GetPods indicates an expected call of GetPods.
func (mr *MockIKubernetesResourceServiceMockRecorder) GetPods(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockIKubernetesResourceService)(nil).GetPods), namespace)
}
