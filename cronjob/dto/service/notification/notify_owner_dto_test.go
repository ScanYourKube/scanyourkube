package notification

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewOwnerNotification(t *testing.T) {
	// Test case 1: Create OwnerNotification with all values provided
	notification1 := NewOwnerNotification(
		"App1",
		"Resource1",
		"Vulnerability1",
		"Description1",
		"1.2.3",
		true,
	)
	expectedNotification1 := OwnerNotification{
		ApplicationName:          "App1",
		ApplicationResourceName:  "Resource1",
		VulnerabilityName:        "Vulnerability1",
		VulnerabilityDescription: "Description1",
		NewVersion:               "1.2.3",
		ShouldUpdate:             true,
	}
	assert.Equal(t, expectedNotification1, notification1)

	// Test case 2: Create OwnerNotification with minimum required values
	notification2 := NewOwnerNotification(
		"App2",
		"Resource2",
		"",
		"",
		"",
		false,
	)
	expectedNotification2 := OwnerNotification{
		ApplicationName:          "App2",
		ApplicationResourceName:  "Resource2",
		VulnerabilityName:        "",
		VulnerabilityDescription: "",
		NewVersion:               "",
		ShouldUpdate:             false,
	}
	assert.Equal(t, expectedNotification2, notification2)
}

func TestOwnerNotification_GetSubject_ShouldUpdate(t *testing.T) {
	dto := OwnerNotification{
		ApplicationName:         "TestApp",
		ApplicationResourceName: "TestResource",
		NewVersion:              "1.2.3",
		ShouldUpdate:            true,
	}

	expectedSubject := "ScanYourKube - Updating image TestResource to version 1.2.3 of application TestApp"
	actualSubject := dto.GetSubject()

	assert.Equal(t, expectedSubject, actualSubject)
}

func TestOwnerNotification_GetSubject_ShouldNotUpdate(t *testing.T) {
	dto := OwnerNotification{
		ApplicationName:         "TestApp",
		ApplicationResourceName: "TestResource",
		ShouldUpdate:            false,
	}

	expectedSubject := "ScanYourKube - Couldn't update TestResource of application TestApp"
	actualSubject := dto.GetSubject()

	assert.Equal(t, expectedSubject, actualSubject)
}

func TestOwnerNotification_GetBody_ShouldUpdate(t *testing.T) {
	dto := OwnerNotification{
		ApplicationResourceName:  "TestResource",
		VulnerabilityName:        "TestVulnerability",
		VulnerabilityDescription: "TestDescription",
		ShouldUpdate:             true,
	}

	expectedBody := "<html><body><h2>Update of image TestResource</h2><p>Our scan found the following vulnerability: TestVulnerability</p><p>Details: TestDescription</p><p>Be aware, that there might be problems with your application. Please check if everything still works out.</p><p>Best regards, your Kubernetes administrator</p><p><i>Generated by ScanYourKube</i></p>"
	actualBody := dto.GetBody()

	assert.Equal(t, expectedBody, actualBody)
}

func TestOwnerNotification_GetBody_ShouldNotUpdate(t *testing.T) {
	dto := OwnerNotification{
		ApplicationResourceName:  "TestResource",
		VulnerabilityName:        "TestVulnerability",
		VulnerabilityDescription: "TestDescription",
		ShouldUpdate:             false,
	}

	expectedBody := "<html><body><h2>Update of image TestResource failed</h2><p>Our vulnerability scan found a container image which doesn't match our vulnerability policy. Currently there is no new container version available to automatically update to. If this image is self maintained, please update your dependencies and deploy a new version. In the case of a managed image, please check if there is a newer major version available and verify if that version matches our vulnerability policy.</p><p>Our scan found the following vulnerability: TestVulnerability</p><p>Details: TestDescription</p><p>Best regards, your Kubernetes administrator</p><p><i>Generated by ScanYourKube</i></p>"
	actualBody := dto.GetBody()

	assert.Equal(t, expectedBody, actualBody)
}
