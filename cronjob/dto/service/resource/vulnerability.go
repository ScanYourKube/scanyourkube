package resource_service

import (
	"fmt"

	api_dto_vulnerability "github.com/scanyourkube/cronjob/dto/api/vulnerability"
	"github.com/scanyourkube/cronjob/dto/api/vulnerability/cvssv3vector"
)

type Vulnerability struct {
	Id                string                 `json:"id,omitempty"`
	VulnerabilityID   string                 `json:"vulnerabilityID,omitempty"`
	VulnerabilityName string                 `json:"vulnerabilityName,omitempty"`
	PackageName       string                 `json:"packageName,omitempty"`
	PackageVersion    string                 `json:"packageVersion,omitempty"`
	Severity          *VulnerabilitySeverity `json:"severity,omitempty"`
	CvssSeverity      *VulnerabilitySeverity `json:"cvssSeverity,omitempty"`
	CvssBaseScore     float32                `json:"cvssBaseScore,omitempty"`
	FixVersion        string                 `json:"fixVersion,omitempty"`
	AttackVector      *AttackVector          `json:"attackVector,omitempty"`
	Description       string                 `json:"description,omitempty"`
	Links             string                 `json:"links,omitempty"`
}

func (dto Vulnerability) Map(dtoApiVulnerability api_dto_vulnerability.DtoVulnerabilityDetails) Vulnerability {
	var severity, cvssSeverity *VulnerabilitySeverity
	vul := func(vul VulnerabilitySeverity) *VulnerabilitySeverity { return &vul }

	if dtoApiVulnerability.Vulnerability.Severity != nil {
		severity = vul(MapFromApiDto(dtoApiVulnerability.Vulnerability.Severity))
	}
	if dtoApiVulnerability.Vulnerability.CvssSeverity != nil {
		cvssSeverity = vul(MapFromApiDto(dtoApiVulnerability.Vulnerability.CvssSeverity))
	}
	var attackVector *AttackVector
	if dtoApiVulnerability.Cvss.CvssV3Vector.AttackVector != nil {
		toPointer := func(attackVector AttackVector) *AttackVector { return &(attackVector) }
		attackVector = toPointer(MapAttackVectorFromApi(dtoApiVulnerability.Cvss.CvssV3Vector.AttackVector))
	}

	return Vulnerability{
		Id:                dtoApiVulnerability.Vulnerability.Id,
		VulnerabilityID:   dtoApiVulnerability.Vulnerability.VulnerabilityID,
		VulnerabilityName: dtoApiVulnerability.Vulnerability.VulnerabilityName,
		PackageName:       dtoApiVulnerability.Vulnerability.PackageName,
		PackageVersion:    dtoApiVulnerability.Vulnerability.PackageVersion,
		FixVersion:        dtoApiVulnerability.Vulnerability.FixVersion,
		Severity:          severity,
		CvssSeverity:      cvssSeverity,
		CvssBaseScore:     dtoApiVulnerability.Vulnerability.CvssBaseScore,
		AttackVector:      attackVector,
		Description:       dtoApiVulnerability.Description,
		Links:             dtoApiVulnerability.Links,
	}
}

type VulnerabilitySeverity int

// List of VulnerabilitySeverity
const (
	CRITICAL VulnerabilitySeverity = iota
	HIGH
	MEDIUM
	LOW
	NEGLIGIBLE
)

// String returns the string value of the status
func (s VulnerabilitySeverity) String() string {
	strings := [...]string{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}

	// prevent panicking in case of status is out-of-range
	if s < CRITICAL || s > NEGLIGIBLE {
		return "Unknown"
	}

	return strings[s]
}

func MapFromApiDto(severity *api_dto_vulnerability.VulnerabilitySeverity) VulnerabilitySeverity {
	switch *severity {
	case api_dto_vulnerability.CRITICAL:
		return CRITICAL
	case api_dto_vulnerability.HIGH:
		return HIGH
	case api_dto_vulnerability.MEDIUM:
		return MEDIUM
	case api_dto_vulnerability.LOW:
		return LOW
	case api_dto_vulnerability.NEGLIGIBLE:
		return NEGLIGIBLE
	}

	panic(fmt.Sprintf("Couldn't find %s in VulnerabilitySeverity", *severity))

}

type AttackVector int

// List of AttackVector
const (
	NETWORK AttackVector = iota
	ADJACENT
	LOCAL
	PHYSICAL
)

func (s AttackVector) String() string {
	strings := [...]string{"NETWORK", "ADJACENT", "LOCAL", "PHYSICAL"}

	// prevent panicking in case of status is out-of-range
	if s < NETWORK || s > PHYSICAL {
		return "Unknown"
	}

	return strings[s]
}

func MapAttackVectorFromApi(attackVector *cvssv3vector.AttackVector) AttackVector {
	switch *attackVector {
	case cvssv3vector.NETWORK:
		return NETWORK
	case cvssv3vector.ADJACENT:
		return ADJACENT
	case cvssv3vector.LOCAL:
		return LOCAL
	case cvssv3vector.PHYSICAL:
		return PHYSICAL
	}

	panic(fmt.Sprintf("Couldn't find %s in AttackVector", *attackVector))

}
