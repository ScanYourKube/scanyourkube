package resource_service

import (
	"fmt"
	dto_vulnerability "github.com/scanyourkube/cronjob/dto/api/vulnerability"
	"github.com/scanyourkube/cronjob/dto/api/vulnerability/cvssv3vector"
	"reflect"
	"testing"

	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
)

// Generate arbitrary values for VulnerabilitySeverity
func genVulnerabilitySeverity() gopter.Gen {
	return gen.OneConstOf(dto_vulnerability.CRITICAL, dto_vulnerability.HIGH, dto_vulnerability.MEDIUM, dto_vulnerability.LOW, dto_vulnerability.NEGLIGIBLE)
}

// Generate arbitrary values for AttackVector
func genAttackVector() gopter.Gen {
	return gen.OneConstOf(cvssv3vector.NETWORK, cvssv3vector.ADJACENT, cvssv3vector.LOCAL, cvssv3vector.PHYSICAL)
}

func genPrivilegesRequired() gopter.Gen {
	return gen.OneConstOf(cvssv3vector.NONE, cvssv3vector.LOW, cvssv3vector.HIGH)
}

// Generate arbitrary values for DtoVulnerability
func genDtoVulnerability() gopter.Gen {
	return gen.Struct(reflect.TypeOf(&dto_vulnerability.DtoVulnerability{}), map[string]gopter.Gen{
		"Id":                gen.Identifier(),
		"VulnerabilityID":   gen.Identifier(),
		"VulnerabilityName": gen.AnyString(),
		"PackageName":       gen.AnyString(),
		"PackageVersion":    gen.AnyString(),
		"FixVersion":        gen.AnyString(),
		"Severity":          gen.PtrOf(genVulnerabilitySeverity()),
		"CvssSeverity":      gen.PtrOf(genVulnerabilitySeverity()),
		"CvssBaseScore":     gen.Float32Range(0.0, 10.0),
	})
}

// Generate arbitrary values for DtoCvss
func genDtoCvss() gopter.Gen {
	return gen.Struct(reflect.TypeOf(&dto_vulnerability.DtoCvss{}), map[string]gopter.Gen{
		"CvssV3Vector": gen.Struct(reflect.TypeOf(&cvssv3vector.Cvssv3Vector{}), map[string]gopter.Gen{
			"AttackVector":       gen.PtrOf(genAttackVector()),
			"PrivilegesRequired": gen.PtrOf(genPrivilegesRequired()),
			"Vector":             gen.AnyString(),
		}),
	})
}

// Generate arbitrary values for DtoVulnerabilityDetails
func genDtoVulnerabilityDetails() gopter.Gen {
	return gen.Struct(reflect.TypeOf(&dto_vulnerability.DtoVulnerabilityDetails{}), map[string]gopter.Gen{
		"Description":   gen.AnyString(),
		"Links":         gen.AnyString(),
		"Vulnerability": genDtoVulnerability(),
		"Cvss":          genDtoCvss(),
	})
}

// Test that the Map method preserves the fields of the input DtoVulnerabilityDetails
func TestMap(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.Rng.Seed(1024)
	parameters.MinSuccessfulTests = 100
	properties := gopter.NewProperties(parameters)

	properties.Property("Map preserves fields", prop.ForAll(
		func(dtoApiVulnerability dto_vulnerability.DtoVulnerabilityDetails) bool {
			dto := Vulnerability{}
			vul := dto.Map(dtoApiVulnerability)
			var severity, cvssSeverity *VulnerabilitySeverity
			severityToPointer := func(vul VulnerabilitySeverity) *VulnerabilitySeverity { return &vul }

			if dtoApiVulnerability.Vulnerability.Severity != nil {
				severity = severityToPointer(MapFromApiDto(dtoApiVulnerability.Vulnerability.Severity))
			}
			if dtoApiVulnerability.Vulnerability.CvssSeverity != nil {
				cvssSeverity = severityToPointer(MapFromApiDto(dtoApiVulnerability.Vulnerability.CvssSeverity))
			}
			var attackVector *AttackVector
			if dtoApiVulnerability.Cvss.CvssV3Vector.AttackVector != nil {
				attackVectorToPointer := func(attackVector AttackVector) *AttackVector { return &(attackVector) }
				attackVector = attackVectorToPointer(MapAttackVectorFromApi(dtoApiVulnerability.Cvss.CvssV3Vector.AttackVector))
			}

			fmt.Printf("dtoApiVulnerability: %+v\n", dtoApiVulnerability)
			fmt.Printf("vul: %+v\n", vul)
			return vul.Id == dtoApiVulnerability.Vulnerability.Id &&
				vul.VulnerabilityID == dtoApiVulnerability.Vulnerability.VulnerabilityID &&
				vul.VulnerabilityName == dtoApiVulnerability.Vulnerability.VulnerabilityName &&
				vul.PackageName == dtoApiVulnerability.Vulnerability.PackageName &&
				vul.PackageVersion == dtoApiVulnerability.Vulnerability.PackageVersion &&
				vul.FixVersion == dtoApiVulnerability.Vulnerability.FixVersion &&
				(vul.Severity == severity || vul.Severity.String() == severity.String()) &&
				(vul.CvssSeverity == cvssSeverity || vul.CvssSeverity.String() == cvssSeverity.String()) &&
				vul.CvssBaseScore == dtoApiVulnerability.Vulnerability.CvssBaseScore &&
				(vul.AttackVector == attackVector || vul.AttackVector.String() == attackVector.String()) &&
				vul.Description == dtoApiVulnerability.Description &&
				vul.Links == dtoApiVulnerability.Links
		},
		genDtoVulnerabilityDetails(),
	))

	properties.TestingRun(t)
}
